package routers

import (
	"github.com/beego/beego/v2/server/web"
	"github.com/hanc00l/nemo_go/pkg/web/controllers"
)

func init() {
	//login := &controllers.LoginController{}
	//web.Router("/", login, "get:IndexAction;post:LoginAction")
	//web.Router("/logout", login, "get:LogoutAction")
	//beego v2.0.2后手工注册路由风格：
	web.CtrlGet("/", (*controllers.LoginController).IndexAction)
	web.CtrlPost("/", (*controllers.LoginController).LoginAction)
	web.CtrlGet("/logout", (*controllers.LoginController).LogoutAction)

	//config := &controllers.ConfigController{}
	//web.Router("/config-list", config, "get:IndexAction;post:LoadDefaultConfigAction")
	//web.Router("/config-change-password", config, "post:ChangePasswordAction")
	//web.Router("/custom-list", config, "get:CustomAction")
	//web.Router("/custom-load", config, "post:LoadCustomConfigAction")
	//web.Router("/custom-save", config, "post:SaveCustomConfigAction")
	//web.Router("/config-save-taskslice", config, "post:SaveTaskSliceNumberAction")
	//web.Router("/config-save-portscan", config, "post:SavePortscanAction")
	//web.Router("/config-save-fingerprint", config, "post:SaveFingerprintAction")
	//web.Router("/config-upload-xraypoc", config, "post:UploadXrayPocAction")
	web.CtrlGet("/config-list", (*controllers.ConfigController).IndexAction)
	web.CtrlPost("/config-list", (*controllers.ConfigController).LoadDefaultConfigAction)
	web.CtrlPost("/config-change-password", (*controllers.ConfigController).ChangePasswordAction)
	web.CtrlGet("/custom-list", (*controllers.ConfigController).CustomAction)
	web.CtrlPost("/custom-load", (*controllers.ConfigController).LoadCustomConfigAction)
	web.CtrlPost("/custom-save", (*controllers.ConfigController).SaveCustomConfigAction)
	web.CtrlPost("/config-save-taskslice", (*controllers.ConfigController).SaveTaskSliceNumberAction)
	web.CtrlPost("/config-save-portscan", (*controllers.ConfigController).SavePortscanAction)
	web.CtrlPost("/config-save-fingerprint", (*controllers.ConfigController).SaveFingerprintAction)
	web.CtrlPost("/config-upload-xraypoc", (*controllers.ConfigController).UploadXrayPocAction)

	//dashboard := &controllers.DashboardController{}
	//web.Router("/dashboard", dashboard, "get:IndexAction;post:GetStatisticDataAction")
	//web.Router("/dashboard-task-info", dashboard, "post:GetTaskInfoAction")
	//web.Router("/worker-list", dashboard, "post:WorkerAliveListAction")
	//web.Router("/onlineuser-list", dashboard, "post:OnlineUserListAction")
	//web.Router("/dashboard-task-started-info", dashboard, "post:GetStartedTaskInfoAction")
	//web.Router("/worker-reload", dashboard, "post:ManualReloadWorkerAction")
	//web.Router("/worker-filesync", dashboard, "post:ManualWorkerFileSyncAction")
	web.CtrlGet("/dashboard", (*controllers.DashboardController).IndexAction)
	web.CtrlPost("/dashboard", (*controllers.DashboardController).GetStatisticDataAction)
	web.CtrlPost("/dashboard-task-info", (*controllers.DashboardController).GetTaskInfoAction)
	web.CtrlPost("/worker-list", (*controllers.DashboardController).WorkerAliveListAction)
	web.CtrlPost("/onlineuser-list", (*controllers.DashboardController).OnlineUserListAction)
	web.CtrlPost("/dashboard-task-started-info", (*controllers.DashboardController).GetStartedTaskInfoAction)
	web.CtrlPost("/worker-reload", (*controllers.DashboardController).ManualReloadWorkerAction)
	web.CtrlPost("/worker-filesync", (*controllers.DashboardController).ManualWorkerFileSyncAction)

	//ip := &controllers.IPController{}
	//web.Router("/ip-list", ip, "get:IndexAction;post:ListAction")
	//web.Router("/ip-info", ip, "get:InfoAction")
	//web.Router("/ip-info", ip, "post:DeleteIPAction")
	//web.Router("/port-attr-delete", ip, "post:DeletePortAttrAction")
	//web.Router("/ip-statistics", ip, "get:StatisticsAction")
	//web.Router("/ip-memo-get", ip, "get:GetMemoAction")
	//web.Router("/ip-memo-update", ip, "post:UpdateMemoAction")
	//web.Router("/ip-memo-export", ip, "get:ExportMemoAction")
	//web.Router("/ip-color-tag", ip, "post:MarkColorTagAction")
	//web.Router("/ip-import-portscan", ip, "post:ImportPortscanResultAction")
	web.CtrlGet("/ip-list", (*controllers.IPController).IndexAction)
	web.CtrlPost("/ip-list", (*controllers.IPController).ListAction)
	web.CtrlGet("/ip-info", (*controllers.IPController).InfoAction)
	web.CtrlPost("/ip-delete", (*controllers.IPController).DeleteIPAction)
	web.CtrlPost("/port-attr-delete", (*controllers.IPController).DeletePortAttrAction)
	web.CtrlGet("/ip-statistics", (*controllers.IPController).StatisticsAction)
	web.CtrlGet("/ip-memo-get", (*controllers.IPController).GetMemoAction)
	web.CtrlPost("/ip-memo-update", (*controllers.IPController).UpdateMemoAction)
	web.CtrlGet("/ip-memo-export", (*controllers.IPController).ExportMemoAction)
	web.CtrlPost("/ip-color-tag", (*controllers.IPController).MarkColorTagAction)
	web.CtrlPost("/ip-import-portscan", (*controllers.IPController).ImportPortscanResultAction)

	//domain := &controllers.DomainController{}
	//web.Router("/domain-list", domain, "get:IndexAction;post:ListAction")
	//web.Router("/domain-info", domain, "get:InfoAction")
	//web.Router("/domain-delete", domain, "post:DeleteDomainAction")
	//web.Router("/domain-attr-delete", domain, "post:DeleteDomainAttrAction")
	//web.Router("/domain-onlineapi-attr-delete", domain, "post:DeleteDomainOnlineAPIAttrAction")
	//web.Router("/domain-statistics", domain, "get:StatisticsAction")
	//web.Router("/domain-memo-get", domain, "get:GetMemoAction")
	//web.Router("/domain-memo-update", domain, "post:UpdateMemoAction")
	//web.Router("/domain-memo-export", domain, "get:ExportMemoAction")
	//web.Router("/domain-color-tag", domain, "post:MarkColorTagAction")
	web.CtrlGet("/domain-list", (*controllers.DomainController).IndexAction)
	web.CtrlPost("/domain-list", (*controllers.DomainController).ListAction)
	web.CtrlGet("/domain-info", (*controllers.DomainController).InfoAction)
	web.CtrlPost("/domain-delete", (*controllers.DomainController).DeleteDomainAction)
	web.CtrlPost("/domain-attr-delete", (*controllers.DomainController).DeleteDomainAttrAction)
	web.CtrlPost("/domain-onlineapi-attr-delete", (*controllers.DomainController).DeleteDomainOnlineAPIAttrAction)
	web.CtrlGet("/domain-statistics", (*controllers.DomainController).StatisticsAction)
	web.CtrlGet("/domain-memo-get", (*controllers.DomainController).GetMemoAction)
	web.CtrlPost("/domain-memo-update", (*controllers.DomainController).UpdateMemoAction)
	web.CtrlGet("/domain-memo-export", (*controllers.DomainController).ExportMemoAction)
	web.CtrlPost("/domain-color-tag", (*controllers.DomainController).MarkColorTagAction)

	//vulnerability := &controllers.VulController{}
	//web.Router("/vulnerability-list", vulnerability, "get:IndexAction;post:ListAction")
	//web.Router("/vulnerability-info", vulnerability, "get:InfoAction")
	//web.Router("/vulnerability-delete", vulnerability, "post:DeleteAction")
	//web.Router("/vulnerability-load-xray-pocfile", vulnerability, "post:LoadXrayPocFileAction")
	//web.Router("/vulnerability-load-nuclei-pocfile", vulnerability, "post:LoadNucleiPocFileAction")
	web.CtrlGet("/vulnerability-list", (*controllers.VulController).IndexAction)
	web.CtrlPost("/vulnerability-list", (*controllers.VulController).ListAction)
	web.CtrlGet("/vulnerability-info", (*controllers.VulController).InfoAction)
	web.CtrlPost("/vulnerability-delete", (*controllers.VulController).DeleteAction)
	web.CtrlPost("/vulnerability-load-xray-pocfile", (*controllers.VulController).LoadXrayPocFileAction)
	web.CtrlPost("/vulnerability-load-nuclei-pocfile", (*controllers.VulController).LoadNucleiPocFileAction)

	//org := &controllers.OrganizationController{}
	//web.Router("/org-list", org, "get:IndexAction;post:ListAction")
	//web.Router("/org-get", org, "post:GetAction")
	//web.Router("/org-getall", org, "post:GetAllAction")
	//web.Router("/org-add", org, "get:AddIndexAction;post:AddSaveAction")
	//web.Router("/org-update", org, "post:UpdateAction")
	//web.Router("/org-delete", org, "post:DeleteAction")
	web.CtrlGet("/org-list", (*controllers.OrganizationController).IndexAction)
	web.CtrlPost("/org-list", (*controllers.OrganizationController).ListAction)
	web.CtrlPost("/org-get", (*controllers.OrganizationController).GetAction)
	web.CtrlPost("/org-getall", (*controllers.OrganizationController).GetAllAction)
	web.CtrlGet("/org-add", (*controllers.OrganizationController).AddIndexAction)
	web.CtrlPost("/org-add", (*controllers.OrganizationController).AddSaveAction)
	web.CtrlPost("/org-update", (*controllers.OrganizationController).UpdateAction)
	web.CtrlPost("/org-delete", (*controllers.OrganizationController).DeleteAction)

	//task := &controllers.TaskController{}
	//web.Router("/task-list", task, "get:IndexAction;post:ListAction")
	//web.Router("/task-info", task, "get:InfoAction")
	//web.Router("/task-delete", task, "post:DeleteAction")
	//web.Router("/task-stop", task, "post:StopAction")
	//web.Router("/task-start-portscan", task, "post:StartPortScanTaskAction")
	//web.Router("/task-start-batchscan", task, "post:StartBatchScanTaskAction")
	//web.Router("/task-start-domainscan", task, "post:StartDomainScanTaskAction")
	//web.Router("/task-start-vulnerability", task, "post:StartPocScanTaskAction")
	//web.Router("/task-batch-delete", task, "post:DeleteBatchAction")
	//web.Router("/task-start-xscan", task, "post:StartXScanTaskAction")
	web.CtrlGet("/task-list", (*controllers.TaskController).IndexAction)
	web.CtrlPost("/task-list", (*controllers.TaskController).ListAction)
	web.CtrlGet("/task-info", (*controllers.TaskController).InfoAction)
	web.CtrlPost("/task-delete", (*controllers.TaskController).DeleteAction)
	web.CtrlPost("/task-stop", (*controllers.TaskController).StopAction)
	web.CtrlPost("/task-start-portscan", (*controllers.TaskController).StartPortScanTaskAction)
	web.CtrlPost("/task-start-batchscan", (*controllers.TaskController).StartBatchScanTaskAction)
	web.CtrlPost("/task-start-domainscan", (*controllers.TaskController).StartDomainScanTaskAction)
	web.CtrlPost("/task-start-vulnerability", (*controllers.TaskController).StartPocScanTaskAction)
	web.CtrlPost("/task-batch-delete", (*controllers.TaskController).DeleteBatchAction)
	web.CtrlPost("/task-start-xscan", (*controllers.TaskController).StartXScanTaskAction)
	////cron task
	//web.Router("/task-cron-list", task, "get:IndexCronAction;post:ListCronAction")
	//web.Router("/task-cron-info", task, "get:InfoCronAction")
	//web.Router("/task-cron-delete", task, "post:DeleteCronAction")
	//web.Router("/task-cron-disable", task, "post:DisableCronTaskAction")
	//web.Router("/task-cron-enable", task, "post:EnableCronTaskAction")
	//web.Router("/task-cron-run", task, "post:RunCronTaskAction")
	web.CtrlGet("/task-cron-list", (*controllers.TaskController).IndexCronAction)
	web.CtrlPost("/task-cron-list", (*controllers.TaskController).ListCronAction)
	web.CtrlGet("/task-cron-info", (*controllers.TaskController).InfoCronAction)
	web.CtrlPost("/task-cron-delete", (*controllers.TaskController).DeleteCronAction)
	web.CtrlPost("/task-cron-disable", (*controllers.TaskController).DisableCronTaskAction)
	web.CtrlPost("/task-cron-enable", (*controllers.TaskController).EnableCronTaskAction)
	web.CtrlPost("/task-cron-run", (*controllers.TaskController).RunCronTaskAction)

	//keyWord := &controllers.KeySearchController{}
	//web.Router("/key-word-list", keyWord, "get:IndexAction;post:ListAction")
	//web.Router("/key-word-add", keyWord, "post:AddSaveAction")
	//web.Router("/key-word-del", keyWord, "post:DeleteKeyWordAction")
	web.CtrlGet("/key-word-list", (*controllers.KeySearchController).IndexAction)
	web.CtrlPost("/key-word-list", (*controllers.KeySearchController).ListAction)
	web.CtrlPost("/key-word-add", (*controllers.KeySearchController).AddSaveAction)
	web.CtrlPost("/key-word-del", (*controllers.KeySearchController).DeleteKeyWordAction)
}
